import React, { useState, useEffect } from 'react';
import {
  Card,
  Tabs,
  Form,
  Input,
  Switch,
  Select,
  Button,
  Space,
  Typography,
  Divider,
  Upload,
  Avatar,
  Row,
  Col,
  App,
  Spin,
  Alert,
  Tag,
} from 'antd';
import {
  UserOutlined,
  SettingOutlined,
  BellOutlined,
  SafetyCertificateOutlined,
  GlobalOutlined,
  UploadOutlined,
  SaveOutlined,
  RobotOutlined,
  ApiOutlined,
  ReloadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
} from '@ant-design/icons';
import { configAPI, useConfigAPI, configCache, SystemConfig, AIConfig } from '../services/configAPI';

const { Title, Text } = Typography;
const { Option } = Select;
const { TextArea } = Input;

const Settings: React.FC = () => {
  const [activeTab, setActiveTab] = useState('profile');
  const [systemForm] = Form.useForm();
  const [aiForm] = Form.useForm();
  const [configLoading, setConfigLoading] = useState(true);
  const [systemConfig, setSystemConfig] = useState<SystemConfig | null>(null);
  const [aiConfigs, setAiConfigs] = useState<Record<string, AIConfig>>({});
  const [currentProvider, setCurrentProvider] = useState<string>('deepseek');
  const [connectionStatus, setConnectionStatus] = useState<Record<string, 'testing' | 'success' | 'error' | 'idle'>>({});

  const { message } = App.useApp();
  const { loading, error, handleRequest, clearError } = useConfigAPI();

  // Âä†ËΩΩÈÖçÁΩÆÊï∞ÊçÆÔºà‰ªÖ‰∏ÄÊ¨°Ôºâ
  useEffect(() => {
    console.log('üöÄ SettingsÁªÑ‰ª∂Â∑≤ÊåÇËΩΩÔºåÂºÄÂßãÂä†ËΩΩÈÖçÁΩÆ...');
    loadConfig();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Âä†ËΩΩÈÖçÁΩÆÊï∞ÊçÆ
  useEffect(() => {
    console.log('üöÄ SettingsÁªÑ‰ª∂Â∑≤ÊåÇËΩΩÔºåÂºÄÂßãÂä†ËΩΩÈÖçÁΩÆ...');
    loadConfig();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const loadConfig = async () => {
    setConfigLoading(true);
    try {
      console.log('üîÑ ÂºÄÂßãÂä†ËΩΩÈÖçÁΩÆ...');
      const config = await configCache.getConfig(true);
      console.log('üìã Ëé∑ÂèñÂà∞ÁöÑÂÆåÊï¥ÈÖçÁΩÆ:', config);

      // ËÆæÁΩÆÁ≥ªÁªüÈÖçÁΩÆ
      console.log('üîß Á≥ªÁªüÈÖçÁΩÆÊï∞ÊçÆ:', config.system);
      setSystemConfig(config.system);
      systemForm.setFieldsValue(config.system);
      console.log('‚úÖ Á≥ªÁªüË°®ÂçïÂ≠óÊÆµÂ∑≤ËÆæÁΩÆ');

      // ËÆæÁΩÆAIÈÖçÁΩÆ
      setAiConfigs(config.ai_models || {});
      setCurrentProvider(config.system?.current_ai_provider || 'deepseek');
      console.log('ü§ñ AIÈÖçÁΩÆÊï∞ÊçÆ:', config.ai_models);
      console.log('üéØ ÂΩìÂâçAIÊèê‰æõÂïÜ:', config.system?.current_ai_provider);

      // ËÆæÁΩÆAIË°®ÂçïÂÄº
      const currentAIConfig = config.ai_models?.[config.system?.current_ai_provider || 'deepseek'];
      console.log('üîç ÂΩìÂâçAIÈÖçÁΩÆ:', currentAIConfig);
      if (currentAIConfig) {
        const aiFormValues = {
          aiProvider: config.system?.current_ai_provider || 'deepseek',
          [`${config.system?.current_ai_provider || 'deepseek'}ApiKey`]: currentAIConfig?.api_key,
          [`${config.system?.current_ai_provider || 'deepseek'}BaseUrl`]: currentAIConfig?.base_url,
          [`${config.system?.current_ai_provider || 'deepseek'}Model`]: currentAIConfig?.model,
          [`${config.system?.current_ai_provider || 'deepseek'}MaxTokens`]: currentAIConfig?.max_tokens,
          [`${config.system?.current_ai_provider || 'deepseek'}Temperature`]: currentAIConfig?.temperature,
        };
        console.log('üìù AIË°®ÂçïÂ≠óÊÆµÂÄº:', aiFormValues);
        aiForm.setFieldsValue(aiFormValues);
        console.log('‚úÖ AIË°®ÂçïÂ≠óÊÆµÂ∑≤ËÆæÁΩÆ');
      }

    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•:', error);
      message.error('Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•');
    } finally {
      setConfigLoading(false);
    }
  };

  // ‰øùÂ≠òÁ≥ªÁªüÈÖçÁΩÆ
  const handleSaveSystemConfig = async (values: any) => {
    await handleRequest(
      () => configAPI.updateSystemConfig(values),
      (response) => {
        setSystemConfig(response.data);
        configCache.clearCache();
        message.success('Á≥ªÁªüÈÖçÁΩÆ‰øùÂ≠òÊàêÂäü');
      },
      (error) => message.error(`‰øùÂ≠òÂ§±Ë¥•: ${error}`)
    );
  };

  // ‰øùÂ≠òAIÈÖçÁΩÆ
  const handleSaveAIConfig = async (values: any) => {
    const provider = values.aiProvider || currentProvider;
    const configData: Partial<AIConfig> = {
      api_key: values[`${provider}ApiKey`],
      base_url: values[`${provider}BaseUrl`],
      model: values[`${provider}Model`],
      max_tokens: values[`${provider}MaxTokens`],
      temperature: values[`${provider}Temperature`],
      enabled: true
    };

    await handleRequest(
      () => configAPI.updateAIConfig(provider, configData),
      (response) => {
        setAiConfigs(prev => ({ ...prev, [provider]: response.data }));
        // Ê∏ÖÈô§ÁºìÂ≠òÔºåÂº∫Âà∂ÈáçÊñ∞Âä†ËΩΩ
        configCache.clearCache();
        message.success(`${provider} ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäü`);
      },
      (error) => message.error(`‰øùÂ≠òÂ§±Ë¥•: ${error}`)
    );

    // Â¶ÇÊûúÂàáÊç¢‰∫ÜÊèê‰æõÂïÜÔºåÂêåÊó∂Êõ¥Êñ∞Á≥ªÁªüÈÖçÁΩÆ
    if (provider !== currentProvider) {
      await handleRequest(
        () => configAPI.switchAIProvider(provider),
        () => {
          setCurrentProvider(provider);
          message.success(`Â∑≤ÂàáÊç¢Âà∞ ${provider}`);
        },
        (error) => message.error(`ÂàáÊç¢Êèê‰æõÂïÜÂ§±Ë¥•: ${error}`)
      );
    }
  };

  // ÊµãËØïAIËøûÊé•
  const handleTestConnection = async (provider: string) => {
    setConnectionStatus(prev => ({ ...prev, [provider]: 'testing' }));

    await handleRequest(
      () => configAPI.testAIConnection(provider),
      (response) => {
        console.log('üîç ÊµãËØïËøûÊé•ÂìçÂ∫î:', response);
        setConnectionStatus(prev => ({ ...prev, [provider]: 'success' }));

        // Ê≠£Á°ÆËÆøÈóÆAPIÂìçÂ∫îÊï∞ÊçÆ
        const responseTime = response?.data?.response_time || 0;
        const model = response?.data?.model || 'unknown';

        message.success(`${provider} ËøûÊé•ÊµãËØïÊàêÂäü (${Math.round(responseTime * 1000)}ms, Ê®°Âûã: ${model})`);
      },
      (error) => {
        console.error('‚ùå ÊµãËØïËøûÊé•Â§±Ë¥•:', error);
        setConnectionStatus(prev => ({ ...prev, [provider]: 'error' }));
        message.error(`${provider} ËøûÊé•ÊµãËØïÂ§±Ë¥•: ${error}`);
      }
    );
  };

  // ÈáçÁΩÆÈÖçÁΩÆ
  const handleResetConfig = async () => {
    await handleRequest(
      () => configAPI.resetConfig(),
      (response) => {
        const config = response.data;
        setSystemConfig(config.system || {});
        setAiConfigs(config.ai_models || {});
        systemForm.setFieldsValue(config.system);
        configCache.clearCache();
        message.success('ÈÖçÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº');
        loadConfig(); // ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆ
      },
      (error) => message.error(`ÈáçÁΩÆÂ§±Ë¥•: ${error}`)
    );
  };

  // ‰øùÂ≠ò‰∏™‰∫∫ËµÑÊñôÔºàÊ®°ÊãüÂäüËÉΩÔºâ
  const handleSave = async (values: any) => {
    await handleRequest(
      () => new Promise(resolve => setTimeout(() => resolve({ success: true }), 1000)),
      () => message.success('‰∏™‰∫∫ËµÑÊñô‰øùÂ≠òÊàêÂäü'),
      (error) => message.error(`‰øùÂ≠òÂ§±Ë¥•: ${error}`)
    );
  };

  const tabItems = [
    {
      key: 'profile',
      label: (
        <Space>
          <UserOutlined />
          <span>‰∏™‰∫∫ËµÑÊñô</span>
        </Space>
      ),
      children: (
        <Card title="‰∏™‰∫∫ËµÑÊñôËÆæÁΩÆ">
          <Form layout="vertical" onFinish={handleSave}>
            <Row gutter={24}>
              <Col span={8}>
                <div style={{ textAlign: 'center', marginBottom: 24 }}>
                  <Avatar size={120} icon={<UserOutlined />} style={{ marginBottom: 16 }} />
                  <br />
                  <Upload>
                    <Button icon={<UploadOutlined />}>Êõ¥Êç¢Â§¥ÂÉè</Button>
                  </Upload>
                </div>
              </Col>
              <Col span={16}>
                <Form.Item label="Áî®Êà∑Âêç" name="username" initialValue="admin">
                  <Input />
                </Form.Item>
                
                <Form.Item label="ÈÇÆÁÆ±" name="email" initialValue="admin@example.com">
                  <Input />
                </Form.Item>
                
                <Form.Item label="ÊâãÊú∫Âè∑" name="phone" initialValue="13800138000">
                  <Input />
                </Form.Item>
                
                <Form.Item label="ÈÉ®Èó®" name="department" initialValue="ÊäÄÊúØÈÉ®">
                  <Input />
                </Form.Item>
                
                <Form.Item label="ËÅå‰Ωç" name="position" initialValue="Á≥ªÁªüÁÆ°ÁêÜÂëò">
                  <Input />
                </Form.Item>
                
                <Form.Item label="‰∏™‰∫∫ÁÆÄ‰ªã" name="bio">
                  <TextArea rows={4} placeholder="ËØ∑ËæìÂÖ•‰∏™‰∫∫ÁÆÄ‰ªã" />
                </Form.Item>
              </Col>
            </Row>
            
            <Divider />
            
            <Form.Item>
              <Button type="primary" htmlType="submit" loading={loading} icon={<SaveOutlined />}>
                ‰øùÂ≠òËÆæÁΩÆ
              </Button>
            </Form.Item>
          </Form>
        </Card>
      ),
    },
    {
      key: 'system',
      label: (
        <Space>
          <SettingOutlined />
          <span>Á≥ªÁªüËÆæÁΩÆ</span>
        </Space>
      ),
      children: (
        <Card title="Á≥ªÁªüËÆæÁΩÆ"
              extra={
                <Space>
                  <Button
                    icon={<ReloadOutlined />}
                    onClick={loadConfig}
                    loading={configLoading}
                  >
                    Âà∑Êñ∞
                  </Button>
                  <Button
                    onClick={async () => {
                      try {
                        console.log('üîç ÊµãËØïAPIËøûÊé•...');
                        const response = await fetch('http://127.0.0.1:9958/api/unified-config/');
                        const data = await response.json();
                        console.log('üì° APIÂìçÂ∫î:', data);
                        message.success('APIËøûÊé•Ê≠£Â∏∏');
                      } catch (error) {
                        console.error('‚ùå APIËøûÊé•Â§±Ë¥•:', error);
                        message.error('APIËøûÊé•Â§±Ë¥•');
                      }
                    }}
                  >
                    ÊµãËØïAPI
                  </Button>
                  <Button
                    danger
                    onClick={handleResetConfig}
                    loading={loading}
                  >
                    ÈáçÁΩÆ‰∏∫ÈªòËÆ§
                  </Button>
                </Space>
              }>
          {configLoading ? (
            <div style={{ textAlign: 'center', padding: '50px 0' }}>
              <Spin size="large" />
              <div style={{ marginTop: 16 }}>Âä†ËΩΩÈÖçÁΩÆ‰∏≠...</div>
            </div>
          ) : (
            <Form
              form={systemForm}
              layout="vertical"
              onFinish={handleSaveSystemConfig}
            >
              {error && (
                <Alert
                  message="ÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•"
                  description={error}
                  type="error"
                  showIcon
                  closable
                  onClose={clearError}
                  style={{ marginBottom: 16 }}
                />
              )}

              <Title level={5}>ÁïåÈù¢ËÆæÁΩÆ</Title>
              <div style={{ marginBottom: 16, padding: 8, background: '#f5f5f5', borderRadius: 4 }}>
                <strong>Ë∞ÉËØï‰ø°ÊÅØ:</strong>
                <div>Á≥ªÁªüÈÖçÁΩÆ: {JSON.stringify(systemConfig)}</div>
                <div>ÈÖçÁΩÆÂä†ËΩΩÁä∂ÊÄÅ: {configLoading ? 'Âä†ËΩΩ‰∏≠' : 'Â∑≤ÂÆåÊàê'}</div>
                <div>ÈîôËØØ‰ø°ÊÅØ: {error || 'Êó†'}</div>
              </div>

              <Form.Item label="‰∏ªÈ¢ò" name="theme">
                <Select>
                  <Option value="ÊµÖËâ≤">ÊµÖËâ≤‰∏ªÈ¢ò</Option>
                  <Option value="Ê∑±Ëâ≤">Ê∑±Ëâ≤‰∏ªÈ¢ò</Option>
                  <Option value="Ëá™Âä®">Ë∑üÈöèÁ≥ªÁªü</Option>
                </Select>
              </Form.Item>

              <Form.Item label="ËØ≠Ë®Ä" name="language">
                <Select>
                  <Option value="‰∏≠Êñá">ÁÆÄ‰Ωì‰∏≠Êñá</Option>
                  <Option value="English">English</Option>
                </Select>
              </Form.Item>

              <Form.Item label="ÈªòËÆ§Ë∑ØÂæÑ" name="default_path">
                <Input placeholder="ËØ∑ËæìÂÖ•ÈªòËÆ§È°πÁõÆË∑ØÂæÑ" />
              </Form.Item>

              <Divider />

              <Title level={5}>ÂäüËÉΩËÆæÁΩÆ</Title>
              <Form.Item label="Ëá™Âä®‰øùÂ≠ò" name="auto_save" valuePropName="checked">
                <Switch />
              </Form.Item>

              <Divider />

              <Form.Item>
                <Space>
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={loading}
                    icon={<SaveOutlined />}
                  >
                    ‰øùÂ≠òÁ≥ªÁªüËÆæÁΩÆ
                  </Button>
                  {systemConfig && (
                    <Tag color="green">
                      <CheckCircleOutlined /> ÈÖçÁΩÆÂ∑≤Âä†ËΩΩ
                    </Tag>
                  )}
                </Space>
              </Form.Item>
            </Form>
          )}
        </Card>
      ),
    },
    {
      key: 'ai-config',
      label: (
        <Space>
          <RobotOutlined />
          <span>AIÈÖçÁΩÆ</span>
        </Space>
      ),
      children: (
        <Card title="AIÊ®°ÂûãÈÖçÁΩÆ"
              extra={
                <Space>
                  <Tag color={currentProvider === 'deepseek' ? 'green' : 'default'}>
                    ÂΩìÂâç: {currentProvider}
                  </Tag>
                  <Button
                    icon={<ReloadOutlined />}
                    onClick={loadConfig}
                    loading={configLoading}
                  >
                    Âà∑Êñ∞
                  </Button>
                </Space>
              }>
          {configLoading ? (
            <div style={{ textAlign: 'center', padding: '50px 0' }}>
              <Spin size="large" />
              <div style={{ marginTop: 16 }}>Âä†ËΩΩAIÈÖçÁΩÆ‰∏≠...</div>
            </div>
          ) : (
            <Form
              form={aiForm}
              layout="vertical"
              onFinish={handleSaveAIConfig}
            >
              {error && (
                <Alert
                  message="AIÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•"
                  description={error}
                  type="error"
                  showIcon
                  closable
                  onClose={clearError}
                  style={{ marginBottom: 16 }}
                />
              )}

              <Title level={5}>AIÊèê‰æõÂïÜËÆæÁΩÆ</Title>
              <Form.Item label="ÂΩìÂâçAIÊèê‰æõÂïÜ" name="aiProvider">
                <Select onChange={(value) => setCurrentProvider(value)}>
                  <Option value="deepseek">DeepSeek</Option>
                  <Option value="openai">OpenAI</Option>
                </Select>
              </Form.Item>

              <Divider />

              <Title level={5}>DeepSeekÈÖçÁΩÆ</Title>
              <Form.Item
                label="APIÂØÜÈí•"
                name="deepseekApiKey"
                rules={[{ required: currentProvider === 'deepseek', message: 'ËØ∑ËæìÂÖ•DeepSeek APIÂØÜÈí•' }]}
              >
                <Input.Password placeholder="ËØ∑ËæìÂÖ•DeepSeek APIÂØÜÈí•" />
              </Form.Item>

              <Form.Item label="APIÂú∞ÂùÄ" name="deepseekBaseUrl">
                <Input placeholder="DeepSeek APIÂú∞ÂùÄ" />
              </Form.Item>

              <Form.Item label="Ê®°Âûã" name="deepseekModel">
                <Select>
                  <Option value="deepseek-chat">deepseek-chat</Option>
                  <Option value="deepseek-coder">deepseek-coder</Option>
                </Select>
              </Form.Item>

              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item label="ÊúÄÂ§ßTokenÊï∞" name="deepseekMaxTokens">
                    <Input type="number" placeholder="4000" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item label="Ê∏©Â∫¶ÂèÇÊï∞" name="deepseekTemperature">
                    <Input type="number" step="0.1" placeholder="0.7" />
                  </Form.Item>
                </Col>
              </Row>

              <Space style={{ marginBottom: 16 }}>
                <Button
                  icon={<ApiOutlined />}
                  loading={connectionStatus.deepseek === 'testing'}
                  onClick={() => handleTestConnection('deepseek')}
                >
                  ÊµãËØïDeepSeekËøûÊé•
                </Button>
                {connectionStatus.deepseek === 'success' && (
                  <Tag color="green"><CheckCircleOutlined /> ËøûÊé•Ê≠£Â∏∏</Tag>
                )}
                {connectionStatus.deepseek === 'error' && (
                  <Tag color="red"><ExclamationCircleOutlined /> ËøûÊé•Â§±Ë¥•</Tag>
                )}
              </Space>

              <Divider />

              <Title level={5}>OpenAIÈÖçÁΩÆ</Title>
              <Form.Item
                label="APIÂØÜÈí•"
                name="openaiApiKey"
                rules={[{ required: currentProvider === 'openai', message: 'ËØ∑ËæìÂÖ•OpenAI APIÂØÜÈí•' }]}
              >
                <Input.Password placeholder="ËØ∑ËæìÂÖ•OpenAI APIÂØÜÈí•" />
              </Form.Item>

              <Form.Item label="APIÂú∞ÂùÄ" name="openaiBaseUrl">
                <Input placeholder="OpenAI APIÂú∞ÂùÄ" />
              </Form.Item>

              <Form.Item label="Ê®°Âûã" name="openaiModel">
                <Select>
                  <Option value="gpt-3.5-turbo">GPT-3.5 Turbo</Option>
                  <Option value="gpt-4">GPT-4</Option>
                  <Option value="gpt-4-turbo">GPT-4 Turbo</Option>
                </Select>
              </Form.Item>

              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item label="ÊúÄÂ§ßTokenÊï∞" name="openaiMaxTokens">
                    <Input type="number" placeholder="4000" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item label="Ê∏©Â∫¶ÂèÇÊï∞" name="openaiTemperature">
                    <Input type="number" step="0.1" placeholder="0.7" />
                  </Form.Item>
                </Col>
              </Row>

              <Space style={{ marginBottom: 16 }}>
                <Button
                  icon={<ApiOutlined />}
                  loading={connectionStatus.openai === 'testing'}
                  onClick={() => handleTestConnection('openai')}
                >
                  ÊµãËØïOpenAIËøûÊé•
                </Button>
                {connectionStatus.openai === 'success' && (
                  <Tag color="green"><CheckCircleOutlined /> ËøûÊé•Ê≠£Â∏∏</Tag>
                )}
                {connectionStatus.openai === 'error' && (
                  <Tag color="red"><ExclamationCircleOutlined /> ËøûÊé•Â§±Ë¥•</Tag>
                )}
              </Space>

              <Divider />

              <Form.Item>
                <Space>
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={loading}
                    icon={<SaveOutlined />}
                  >
                    ‰øùÂ≠òAIÈÖçÁΩÆ
                  </Button>
                  <Button onClick={handleResetConfig} loading={loading}>
                    ÈáçÁΩÆ‰∏∫ÈªòËÆ§
                  </Button>
                  {aiConfigs && Object.keys(aiConfigs).length > 0 && (
                    <Tag color="blue">
                      <CheckCircleOutlined /> Â∑≤ÈÖçÁΩÆ {Object.keys(aiConfigs).length} ‰∏™Êèê‰æõÂïÜ
                    </Tag>
                  )}
                </Space>
              </Form.Item>
            </Form>
          )}
        </Card>
      ),
    },
    {
      key: 'notifications',
      label: (
        <Space>
          <BellOutlined />
          <span>ÈÄöÁü•ËÆæÁΩÆ</span>
        </Space>
      ),
      children: (
        <Card title="ÈÄöÁü•ËÆæÁΩÆ">
          <Form layout="vertical" onFinish={handleSave}>
            <Title level={5}>ÈÇÆ‰ª∂ÈÄöÁü•</Title>
            <Form.Item label="È°πÁõÆÊõ¥Êñ∞ÈÄöÁü•" name="projectNotification" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="Â∑•‰ΩúÊµÅÂÆåÊàêÈÄöÁü•" name="workflowNotification" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="Á≥ªÁªüÁª¥Êä§ÈÄöÁü•" name="systemNotification" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="ÂÆâÂÖ®Ë≠¶ÂëäÈÄöÁü•" name="securityNotification" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Divider />
            
            <Title level={5}>ÊµèËßàÂô®ÈÄöÁü•</Title>
            <Form.Item label="Ê°åÈù¢ÈÄöÁü•" name="desktopNotification" valuePropName="checked" initialValue={false}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="Â£∞Èü≥ÊèêÈÜí" name="soundNotification" valuePropName="checked" initialValue={false}>
              <Switch />
            </Form.Item>
            
            <Divider />
            
            <Title level={5}>ÈÄöÁü•È¢ëÁéá</Title>
            <Form.Item label="ÊëòË¶ÅÈ¢ëÁéá" name="summaryFrequency" initialValue="daily">
              <Select>
                <Option value="realtime">ÂÆûÊó∂</Option>
                <Option value="hourly">ÊØèÂ∞èÊó∂</Option>
                <Option value="daily">ÊØèÊó•</Option>
                <Option value="weekly">ÊØèÂë®</Option>
              </Select>
            </Form.Item>
            
            <Divider />
            
            <Form.Item>
              <Button type="primary" htmlType="submit" loading={loading} icon={<SaveOutlined />}>
                ‰øùÂ≠òËÆæÁΩÆ
              </Button>
            </Form.Item>
          </Form>
        </Card>
      ),
    },
    {
      key: 'security',
      label: (
        <Space>
          <SafetyCertificateOutlined />
          <span>ÂÆâÂÖ®ËÆæÁΩÆ</span>
        </Space>
      ),
      children: (
        <Card title="ÂÆâÂÖ®ËÆæÁΩÆ">
          <Form layout="vertical" onFinish={handleSave}>
            <Title level={5}>ÂØÜÁ†ÅËÆæÁΩÆ</Title>
            <Form.Item label="ÂΩìÂâçÂØÜÁ†Å" name="currentPassword">
              <Input.Password placeholder="ËØ∑ËæìÂÖ•ÂΩìÂâçÂØÜÁ†Å" />
            </Form.Item>
            
            <Form.Item label="Êñ∞ÂØÜÁ†Å" name="newPassword">
              <Input.Password placeholder="ËØ∑ËæìÂÖ•Êñ∞ÂØÜÁ†Å" />
            </Form.Item>
            
            <Form.Item label="Á°ÆËÆ§Êñ∞ÂØÜÁ†Å" name="confirmPassword">
              <Input.Password placeholder="ËØ∑ÂÜçÊ¨°ËæìÂÖ•Êñ∞ÂØÜÁ†Å" />
            </Form.Item>
            
            <Divider />
            
            <Title level={5}>ÁôªÂΩïÂÆâÂÖ®</Title>
            <Form.Item label="ÂèåÂõ†Á¥†ËÆ§ËØÅ" name="twoFactor" valuePropName="checked" initialValue={false}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="ÁôªÂΩïIPÈôêÂà∂" name="ipRestriction" valuePropName="checked" initialValue={false}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="‰ºöËØùË∂ÖÊó∂Êó∂Èó¥" name="sessionTimeout" initialValue="30">
              <Select>
                <Option value="15">15ÂàÜÈíü</Option>
                <Option value="30">30ÂàÜÈíü</Option>
                <Option value="60">1Â∞èÊó∂</Option>
                <Option value="240">4Â∞èÊó∂</Option>
                <Option value="480">8Â∞èÊó∂</Option>
              </Select>
            </Form.Item>
            
            <Divider />
            
            <Title level={5}>Êï∞ÊçÆÂÆâÂÖ®</Title>
            <Form.Item label="Êï∞ÊçÆÂä†ÂØÜ" name="dataEncryption" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Form.Item label="Êìç‰ΩúÊó•Âøó" name="operationLog" valuePropName="checked" initialValue={true}>
              <Switch />
            </Form.Item>
            
            <Divider />
            
            <Form.Item>
              <Space>
                <Button type="primary" htmlType="submit" loading={loading} icon={<SaveOutlined />}>
                  ‰øùÂ≠òËÆæÁΩÆ
                </Button>
                <Button>Êü•ÁúãÁôªÂΩïÂéÜÂè≤</Button>
              </Space>
            </Form.Item>
          </Form>
        </Card>
      ),
    },
    {
      key: 'about',
      label: (
        <Space>
          <GlobalOutlined />
          <span>ÂÖ≥‰∫éÁ≥ªÁªü</span>
        </Space>
      ),
      children: (
        <Card title="ÂÖ≥‰∫éÁ≥ªÁªü">
          <div style={{ textAlign: 'center', padding: '40px 0' }}>
            <Title level={2}>ZtbAiBidApp</Title>
            <Text type="secondary" style={{ fontSize: 16 }}>
              Êô∫ËÉΩÊäïÊ†áÊñá‰ª∂ÁîüÊàêÁ≥ªÁªü
            </Text>
            
            <Divider />
            
            <Row gutter={[32, 16]} style={{ marginTop: 32 }}>
              <Col span={8}>
                <div>
                  <Text strong>ÁâàÊú¨Âè∑</Text>
                  <br />
                  <Text>v1.0.0</Text>
                </div>
              </Col>
              <Col span={8}>
                <div>
                  <Text strong>ÂèëÂ∏ÉÊó•Êúü</Text>
                  <br />
                  <Text>2024-08-04</Text>
                </div>
              </Col>
              <Col span={8}>
                <div>
                  <Text strong>ÊäÄÊúØÊ†à</Text>
                  <br />
                  <Text>React + TypeScript</Text>
                </div>
              </Col>
            </Row>
            
            <Divider />
            
            <div style={{ marginTop: 32 }}>
              <Text>
                Êú¨Á≥ªÁªüÈááÁî®AIÊäÄÊúØÔºå‰∏∫Áî®Êà∑Êèê‰æõÊô∫ËÉΩÂåñÁöÑÊäïÊ†áÊñá‰ª∂ÁîüÊàêÊúçÂä°Ôºå
                ÊîØÊåÅÂ§öÁßçÊñáÊ°£Á±ªÂûãÂíåËá™ÂÆö‰πâÊ®°ÊùøÔºåÊèêÈ´òÊäïÊ†áÊïàÁéáÂíåÊàêÂäüÁéá„ÄÇ
              </Text>
            </div>
            
            <div style={{ marginTop: 24 }}>
              <Space>
                <Button>Áî®Êà∑ÊâãÂÜå</Button>
                <Button>ÊäÄÊúØÊîØÊåÅ</Button>
                <Button>ÊÑèËßÅÂèçÈ¶à</Button>
              </Space>
            </div>
          </div>
        </Card>
      ),
    },
  ];

  return (
    <div style={{ padding: 24, background: '#f5f5f5', minHeight: '100vh' }}>
      <Card>
        <Tabs
          activeKey={activeTab}
          onChange={setActiveTab}
          items={tabItems}
          size="large"
        />
      </Card>
    </div>
  );
};

export default Settings;
